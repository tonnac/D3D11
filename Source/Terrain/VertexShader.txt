cbuffer VS_CB
{
	float4 Color : packoffset(c0);
	float4 Util : packoffset(c1);
}

struct VS_INPUT
{
	float4 pos : POSITION;
	float2 tex : TEXCOORD;
};
struct VS_OUTPUT
{
	float4 pos : SV_POSITION;
	float2 tex : TEXCOORD; 
};

float4 Rotate(in float4 pos)
{
	float4 vPos = pos;
	vPos.x = cos(radians(Util.x)) * pos.x + sin(radians(Util.x)) * pos.y;
	vPos.y = cos(radians(Util.x)) * pos.y - sin(radians(Util.x)) * pos.x;
	return vPos;
}

VS_OUTPUT VS(in VS_INPUT input)
{
	VS_OUTPUT output = (VS_OUTPUT)0;
	output.pos = Rotate(input.pos);
	output.tex = input.tex;
	return output;
}

///////////////////////////////////////
Texture2D g_txDiffuse : register(t0);
SamplerState g_SamState : register(s0);

struct PS_INPUT
{
	float4 pos : SV_POSITION;
	float2 tex : TEXCOORD;
};

float4 PS(in PS_INPUT input) : SV_Target
{
	float4 TexColor = g_txDiffuse.Sample(g_SamState, input.tex);
	return TexColor;
}

float4 TerrainPS(in PS_INPUT input) : SV_Target
{
	float4 Color1 = float4(1.0f,0.0f,0.0f,1.0f);
	return Color1;
}