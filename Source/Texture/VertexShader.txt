cbuffer VS_CB
{
	float4 g_Color : packoffset(c0);
	float g_Angle : packoffset(c1.x);
	float g_Time : packoffset(c1.y);
	float g_Index : packoffset(c1.z);
	float w : packoffset(c1.w);
}
struct VS_INPUT
{
	float4 pos : POSITION;
	float4 col : COLOR;
	float2 tex : TEXCOORD;
};
struct VS_OUTPUT
{
	float4 pos  : SV_POSITION;
	float4 col : COLOR;
	float2 tex  : TEXCOORD;
};
float4 Rotate(in float4 pos)
{
	float2 vPos;
	vPos.x = pos.x * cos(radians(g_Angle)) + pos.y * sin(radians(g_Angle));
	vPos.y = pos.y * cos(radians(g_Angle)) - pos.x * sin(radians(g_Angle));
	return float4(vPos,0.5f,1.0f);
}

float4 getPos(in float4 pos, in uint index)
{
	float4 vPos = float4(pos);
	switch(index)
	{
		case 0: {vPos = pos;} break;
		case 1: {vPos = Rotate(pos);} break;
	}
	return vPos;
}

VS_OUTPUT VS(in VS_INPUT input )
{
	VS_OUTPUT output = (VS_OUTPUT)0;
    output.pos = float4(getPos(input.pos, g_Index));
	output.tex = input.tex;
	output.col = input.col;
	return output;
}

//////////////////PIXEL////////////////////
Texture2D g_txDiffuse : register(t0);
SamplerState g_SamState : register(s0);

struct PS_INPUT
{
	float4 pos : SV_POSITION;
	float4 col : COLOR;
	float2 tex : TEXCOORD;
};
float4 PS(in PS_INPUT input ) : SV_Target
{
	float4 fTexColor = g_txDiffuse.Sample(g_SamState, input.tex);
	float4 inco = input.col;
	inco.x = inco.x * (cos(g_Time) * 0.5 + 0.5);
	inco.y = inco.y * (cos(g_Time) * 0.5 + 0.5);
	inco.z = inco.z * (cos(g_Time) * 0.5 + 0.5);
	return fTexColor * inco;
    //return float4( g_Color.x, g_Color.y, g_Color.z, 1.0f );
}