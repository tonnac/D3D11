cbuffer VS_CB
{
	float4	Cr			: packoffset(c0);
	float	Width		: packoffset(c1.x);
	float	Height		: packoffset(c1.y);
	float	Cos			: packoffset(c1.z);
	float	Utilw		: packoffset(c1.w);
	matrix	g_proj		: packoffset(c2);
}

struct VS_INPUT
{
	float4 pos : POSITION;
	float4 Col : COLOR;
	float2 tex : TEXCOORD;
};
struct VS_OUTPUT
{
	float4 pos : SV_POSITION;
	float4 Col : COLOR;
	float2 tex : TEXCOORD; 
};

float4 Rotate(in float4 pos)
{
	float4 vPos = pos;
//	vPos.x = cos(radians(Util.x)) * pos.x + sin(radians(Util.x)) * pos.y;
//	vPos.y = cos(radians(Util.x)) * pos.y - sin(radians(Util.x)) * pos.x;
	return vPos;
}

VS_OUTPUT VS(in VS_INPUT vIn)
{
	VS_OUTPUT vOut = (VS_OUTPUT)0;
	float4 vLocal = float4(vIn.pos.x, vIn.pos.y, 1.0f, 1.0f);
	vOut.pos = mul(vLocal, g_proj);
	vOut.pos.z = 0.5f;
	vOut.tex.x = vIn.tex.x / Width;
	vOut.tex.y = vIn.tex.y / Height;
	return vOut;
}
VS_OUTPUT PLAYER(in VS_INPUT vIn)
{
	VS_OUTPUT vOut = (VS_OUTPUT)0;
	float4 vLocal = float4(vIn.pos.x, vIn.pos.y, 1.0f, 1.0f);
	vOut.pos = mul(vLocal, g_proj);
	vOut.pos.z = 0.5f;
	vOut.tex.x = vIn.tex.x / Width;
	vOut.tex.y = vIn.tex.y / Height;
	return vOut;
}
VS_OUTPUT Button(in VS_INPUT vIn)
{
	VS_OUTPUT vOut = (VS_OUTPUT)0;
	float4 vLocal = float4(vIn.pos.x, vIn.pos.y, 1.0f, 1.0f);
	vLocal.y = vLocal.y - cos(Utilw) * 5.0f;

	float4 vCen = float4(Cr.y, Cr.z, 1.0f, 1.0f);

	vLocal.x -= vCen.x;
	vLocal.y -= vCen.y;

	vLocal.x = vLocal.x * cos(Cr.x) + vLocal.y * sin(Cr.x);
	vLocal.y = -vLocal.x * sin(Cr.x) + vLocal.y * cos(Cr.x);

	vLocal.x += vCen.x;
	vLocal.y += vCen.y;

	vCen = mul(vCen, g_proj);

	vOut.pos = mul(vLocal, g_proj);
	vOut.pos.z = 0.5f;

//	vOut.pos.x -= vCen.x;
//	vOut.pos.y -= vCen.y;

//	vOut.pos.x = vOut.pos.x * cos(Cr.x) - vOut.pos.y * sin(Cr.x);
//	vOut.pos.y = vOut.pos.x * sin(Cr.x) + vOut.pos.y * cos(Cr.x);

	vOut.tex.x = vIn.tex.x / Width;
	vOut.tex.y = vIn.tex.y / Height;
	return vOut;
}
///////////////////////////////////////
Texture2D g_txDiffuse : register(t0);
SamplerState g_SamState : register(s0);

struct PS_INPUT
{
	float4 pos : SV_POSITION;
	float4 Col : COLOR;
	float2 tex : TEXCOORD;
};

float4 PS(in PS_INPUT input) : SV_Target
{
	float4 TexColor = g_txDiffuse.Sample(g_SamState, input.tex);
	return TexColor;
}

float4 TerrainPS(in PS_INPUT input) : SV_Target
{
	float4 Color1 = float4(0.0f,0.0f,1.0f,1.0f);
	return Color1;
}

float4 PlayerPS(in PS_INPUT input) : SV_Target
{
	float4 TexColor = g_txDiffuse.Sample(g_SamState, input.tex);
	if(TexColor.a < 0.1)
	{
		discard;
	}
	TexColor.a = Cos;
	return TexColor;
}

float4 FadePS(in PS_INPUT input) : SV_Target
{
	float4 Color = float4(0.0f, 0.0f, 0.0f, 0.0f);
	Color.a = cos(Cos);
	return Color;
}

float4 SettingPS(in PS_INPUT input) : SV_Target
{
	float4 TexColor = g_txDiffuse.Sample(g_SamState, input.tex);
	if(TexColor.a < 0.5f)
	{
		TexColor = float4(0.0f,0.0f,0.0f,Cr.x);
	}
	return TexColor;
}

float4 KeyPS(in PS_INPUT input) : SV_Target
{
	float4 TexColor = g_txDiffuse.Sample(g_SamState, input.tex);
	if(TexColor.a < 0.5f)
	{
		TexColor = float4(36 / 255.0f, 0.0f, 18 / 255.0f, 0.5f);
	}
	return TexColor;
}