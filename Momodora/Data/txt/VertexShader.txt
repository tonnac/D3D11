cbuffer VS_CB
{
	float4	Cr			: packoffset(c0);
	float	Width		: packoffset(c1.x);
	float	Height		: packoffset(c1.y);
	float	Cos			: packoffset(c1.z);
	float	Utilw		: packoffset(c1.w);
	matrix	g_proj		: packoffset(c2);
}

struct VS_INPUT
{
	float4 pos : POSITION;
	float4 Col : COLOR;
	float2 tex : TEXCOORD;
};
struct VS_OUTPUT
{
	float4 pos : SV_POSITION;
	float4 Col : COLOR;
	float2 tex : TEXCOORD; 
};

float CosFunc()
{
	float ret = cos(Utilw) * 0.5f + 0.5f;
	return ret;
}

float SinFunc()
{
	float ret = sin(Utilw) * 0.5f + 0.5f;
	return ret;
}


float4 Rotate(in float4 pos)
{
	float4 vPos = pos;
//	vPos.x = cos(radians(Util.x)) * pos.x + sin(radians(Util.x)) * pos.y;
//	vPos.y = cos(radians(Util.x)) * pos.y - sin(radians(Util.x)) * pos.x;
	return vPos;
}

VS_OUTPUT VS(in VS_INPUT vIn)
{
	VS_OUTPUT vOut = (VS_OUTPUT)0;
	float4 vLocal = float4(vIn.pos.x, vIn.pos.y, 1.0f, 1.0f);
	vOut.pos = mul(vLocal, g_proj);
	vOut.pos.z = 0.5f;
	vOut.Col = vIn.Col;
	vOut.tex.x = vIn.tex.x / Width;
	vOut.tex.y = vIn.tex.y / Height;
	return vOut;
}
VS_OUTPUT PLAYER(in VS_INPUT vIn)
{
	VS_OUTPUT vOut = (VS_OUTPUT)0;
	float4 vLocal = float4(vIn.pos.x, vIn.pos.y, 1.0f, 1.0f);
	vOut.pos = mul(vLocal, g_proj);
	vOut.pos.z = 0.5f;
	vOut.tex.x = vIn.tex.x / Width;
	vOut.tex.y = vIn.tex.y / Height;
	return vOut;
}
VS_OUTPUT Button(in VS_INPUT vIn)
{
	VS_OUTPUT vOut = (VS_OUTPUT)0;
	float4 vLocal = float4(vIn.pos.x, vIn.pos.y, 1.0f, 1.0f);
	vLocal.y = vLocal.y - cos(Utilw) * 5.0f;

	float4 vCen = float4(Cr.y, Cr.z, 1.0f, 1.0f);

	vLocal.x -= vCen.x;
	vLocal.y -= vCen.y;

	vLocal.x += vCen.x;
	vLocal.y += vCen.y;

	vCen = mul(vCen, g_proj);

	vOut.pos = mul(vLocal, g_proj);
	vOut.pos.z = 0.5f;

	vOut.tex.x = vIn.tex.x / Width;
	vOut.tex.y = vIn.tex.y / Height;
	return vOut;
}
VS_OUTPUT Misc(in VS_INPUT vIn)
{
	VS_OUTPUT vOut = (VS_OUTPUT)0;
	float4 vLocal = float4(vIn.pos.x, vIn.pos.y, 1.0f, 1.0f);
	float4 Center = float4(Cos, Utilw, 1.0f, 1.0f);
	vOut.pos = mul(vLocal, g_proj);
	Center = mul(Center, g_proj);

	float2 eew = float2(vOut.pos.x, vOut.pos.y);
	float2 eeq = float2(eew.x - Center.x, eew.y - Center.y);

	eeq.x = eeq.x * (sin(Cr.x) * 0.5f + 0.5f);
	eeq.y = eeq.y * (sin(Cr.x) * 0.5f + 0.5f);

	eeq.x = eeq.x + (cos(Cr.x) * 80.0f / 960.0f);

	eeq.x = eeq.x + Center.x;
	eeq.y = eeq.y + Center.y;

	vOut.pos.x = eeq.x;
	vOut.pos.y = eeq.y;

	vOut.pos.z = 0.5f;
	vOut.Col = vIn.Col;
	vOut.tex.x = vIn.tex.x / Width;
	vOut.tex.y = vIn.tex.y / Height;
	return vOut;
}
///////////////////////////////////////
Texture2D g_txDiffuse : register(t0);
SamplerState g_SamState : register(s0);

struct PS_INPUT
{
	float4 pos : SV_POSITION;
	float4 Col : COLOR;
	float2 tex : TEXCOORD;
};

float4 PS(in PS_INPUT input) : SV_Target
{
	float4 TexColor = g_txDiffuse.Sample(g_SamState, input.tex);
	return TexColor;
}

float4 TerrainPS(in PS_INPUT input) : SV_Target
{
	float4 Color1 = float4(Cr.x,Cr.y,Cr.z,Cr.w);
	return Color1;
}

float4 PlayerPS(in PS_INPUT input) : SV_Target
{
	float4 TexColor = g_txDiffuse.Sample(g_SamState, input.tex);
	if(TexColor.a < 0.1)
	{
		discard;
	}
	TexColor.a = Cos;
	return TexColor;
}

float4 FadePS(in PS_INPUT input) : SV_Target
{
	float4 Color = float4(0.0f, 0.0f, 0.0f, 0.0f);
	Color.a = cos(Cos);
	return Color;
}

float4 SettingPS(in PS_INPUT input) : SV_Target
{
	float4 TexColor = g_txDiffuse.Sample(g_SamState, input.tex);
	if(TexColor.a < 0.5f)
	{
		TexColor = float4(0.0f,0.0f,0.0f,Cr.x);
	}
	return TexColor;
}

float4 KeyPS(in PS_INPUT input) : SV_Target
{
	float4 TexColor = g_txDiffuse.Sample(g_SamState, input.tex);
	if(TexColor.a < 0.5f)
	{
		TexColor = float4(36 / 255.0f, 0.0f, 18 / 255.0f, 0.5f);
	}
	return TexColor;
}

float4 SelectPS(in PS_INPUT input) : SV_Target
{
	float4 TexColor = g_txDiffuse.Sample(g_SamState, input.tex);
	TexColor.a = cos(Cr.x) * 0.5f + 0.5f;
	if(TexColor.a < 0.2f)
	{
		TexColor.a = 0.2f;
	}
	if(TexColor.a > 0.8f)
	{
		TexColor.a = 0.8f;
	}
	return TexColor;
}

float4 SelectPSS(in PS_INPUT input) : SV_Target
{
	float4 fColor = input.Col;
	fColor.a = cos(Cr.x) * 0.5f + 0.8f;
	return fColor;
}